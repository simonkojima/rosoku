
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/example_within-subject-classification-riemannian.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_example_within-subject-classification-riemannian.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_example_within-subject-classification-riemannian.py:


Example: Within-subject classification with riemannian classifier
=================================================================

.. GENERATED FROM PYTHON SOURCE LINES 7-17

.. code-block:: Python

    import functools

    import mne
    import tag_mne as tm

    import moabb.datasets

    import pyriemann
    import rosoku








.. GENERATED FROM PYTHON SOURCE LINES 18-22

.. code-block:: Python


    subject = 56
    resample = 128








.. GENERATED FROM PYTHON SOURCE LINES 23-110

.. code-block:: Python


    # load dataset and generate epochs


    def epochs_from_raws(
        raws, runs, rtypes, tmin, tmax, l_freq, h_freq, order_filter, subject
    ):
        epochs_list = list()
        for raw, run, rtype in zip(raws, runs, rtypes):

            raw.filter(
                l_freq=l_freq,
                h_freq=h_freq,
                method="iir",
                iir_params={"ftype": "butter", "order": order_filter, "btype": "bandpass"},
            )

            # eog and emg mapping
            mapping = dict()
            for ch in raw.ch_names:
                if "EOG" in ch:
                    mapping[ch] = "eog"
                elif "EMG" in ch:
                    mapping[ch] = "emg"

            raw.set_channel_types(mapping)
            raw.set_montage("standard_1020")

            events, event_id = mne.events_from_annotations(raw)

            samples, markers = tm.markers_from_events(events, event_id)
            markers = tm.add_tag(markers, f"subject:{subject}")
            markers = tm.add_event_names(
                markers, {"left": ["left_hand"], "right": ["right_hand"]}
            )
            markers = tm.add_tag(markers, f"run:{run}")
            markers = tm.add_tag(markers, f"rtype:{rtype}")

            samples, markers = tm.remove(samples, markers, "event:misc")

            events, event_id = tm.events_from_markers(samples, markers)
            epochs = mne.Epochs(
                raw=raw,
                tmin=tmin,
                tmax=tmax,
                events=events,
                event_id=event_id,
                baseline=None,
            )

            epochs_list.append(epochs)

        epochs = tm.concatenate_epochs(epochs_list)

        return epochs


    dataset = moabb.datasets.Dreyer2023()
    sessions = dataset.get_data(subjects=[subject])
    raws = sessions[subject]["0"]

    epochs_acquisition = epochs_from_raws(
        raws=[raws[key] for key in ["0R1acquisition", "1R2acquisition"]],
        runs=[1, 2],
        rtypes=["acquisition", "acquisition"],
        tmin=-1.0,
        tmax=5.5,
        l_freq=8.0,
        h_freq=30.0,
        order_filter=4,
        subject=subject,
    ).resample(resample)

    epochs_online = epochs_from_raws(
        raws=[raws[key] for key in ["2R3online", "3R4online", "4R5online"]],
        runs=[3, 4, 5],
        rtypes=["online", "online", "online"],
        tmin=-1.0,
        tmax=5.5,
        l_freq=8.0,
        h_freq=30.0,
        order_filter=4,
        subject=subject,
    ).resample(resample)

    epochs = tm.concatenate_epochs([epochs_acquisition, epochs_online])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0it [00:00, ?it/s]    9it [00:00, 36088.66it/s]
    Reading 0 ... 230911  =      0.000 ...   450.998 secs...
    Reading 0 ... 230911  =      0.000 ...   450.998 secs...
    Reading 0 ... 230911  =      0.000 ...   450.998 secs...
    Reading 0 ... 230911  =      0.000 ...   450.998 secs...
    Reading 0 ... 230911  =      0.000 ...   450.998 secs...
    No stim channel nor annotations found, skipping setting annotations.
    No stim channel nor annotations found, skipping setting annotations.
    No stim channel nor annotations found, skipping setting annotations.
    No stim channel nor annotations found, skipping setting annotations.
    No stim channel nor annotations found, skipping setting annotations.
    Filtering raw data in 1 contiguous segment
    Setting up band-pass filter from 8 - 30 Hz

    IIR filter parameters
    ---------------------
    Butterworth bandpass zero-phase (two-pass forward and reverse) non-causal filter:
    - Filter order 16 (effective, after forward-backward)
    - Cutoffs at 8.00, 30.00 Hz: -6.02, -6.02 dB

    Used Annotations descriptions: [np.str_('1010'), np.str_('32769'), np.str_('32770'), np.str_('33281'), np.str_('33282'), np.str_('768'), np.str_('781'), np.str_('786'), np.str_('800'), np.str_('left_hand'), np.str_('right_hand')]
    Not setting metadata
    40 matching events found
    No baseline correction applied
    0 projection items activated
    Filtering raw data in 1 contiguous segment
    Setting up band-pass filter from 8 - 30 Hz

    IIR filter parameters
    ---------------------
    Butterworth bandpass zero-phase (two-pass forward and reverse) non-causal filter:
    - Filter order 16 (effective, after forward-backward)
    - Cutoffs at 8.00, 30.00 Hz: -6.02, -6.02 dB

    Used Annotations descriptions: [np.str_('1010'), np.str_('32769'), np.str_('32770'), np.str_('33281'), np.str_('33282'), np.str_('768'), np.str_('781'), np.str_('786'), np.str_('800'), np.str_('left_hand'), np.str_('right_hand')]
    Not setting metadata
    40 matching events found
    No baseline correction applied
    0 projection items activated
    /home/skojima/miniconda3/envs/sphinx/lib/python3.11/site-packages/tag_mne/mne_utils.py:14: RuntimeWarning: Concatenation of Annotations within Epochs is not supported yet. All annotations will be dropped.
      return mne.concatenate_epochs(epochs_list, add_offset)
    Using data from preloaded Raw for 40 events and 3329 original time points ...
    0 bad epochs dropped
    Using data from preloaded Raw for 40 events and 3329 original time points ...
    0 bad epochs dropped
    Using data from preloaded Raw for 40 events and 3329 original time points ...
    Using data from preloaded Raw for 40 events and 3329 original time points ...
    Not setting metadata
    80 matching events found
    No baseline correction applied
    Filtering raw data in 1 contiguous segment
    Setting up band-pass filter from 8 - 30 Hz

    IIR filter parameters
    ---------------------
    Butterworth bandpass zero-phase (two-pass forward and reverse) non-causal filter:
    - Filter order 16 (effective, after forward-backward)
    - Cutoffs at 8.00, 30.00 Hz: -6.02, -6.02 dB

    Used Annotations descriptions: [np.str_('1010'), np.str_('32769'), np.str_('32770'), np.str_('33281'), np.str_('33282'), np.str_('33284'), np.str_('768'), np.str_('781'), np.str_('786'), np.str_('800'), np.str_('left_hand'), np.str_('right_hand')]
    Not setting metadata
    40 matching events found
    No baseline correction applied
    0 projection items activated
    Filtering raw data in 1 contiguous segment
    Setting up band-pass filter from 8 - 30 Hz

    IIR filter parameters
    ---------------------
    Butterworth bandpass zero-phase (two-pass forward and reverse) non-causal filter:
    - Filter order 16 (effective, after forward-backward)
    - Cutoffs at 8.00, 30.00 Hz: -6.02, -6.02 dB

    Used Annotations descriptions: [np.str_('1010'), np.str_('32769'), np.str_('32770'), np.str_('33281'), np.str_('33282'), np.str_('33284'), np.str_('768'), np.str_('781'), np.str_('786'), np.str_('800'), np.str_('left_hand'), np.str_('right_hand')]
    Not setting metadata
    40 matching events found
    No baseline correction applied
    0 projection items activated
    Filtering raw data in 1 contiguous segment
    Setting up band-pass filter from 8 - 30 Hz

    IIR filter parameters
    ---------------------
    Butterworth bandpass zero-phase (two-pass forward and reverse) non-causal filter:
    - Filter order 16 (effective, after forward-backward)
    - Cutoffs at 8.00, 30.00 Hz: -6.02, -6.02 dB

    Used Annotations descriptions: [np.str_('1010'), np.str_('32769'), np.str_('32770'), np.str_('33281'), np.str_('33282'), np.str_('33284'), np.str_('768'), np.str_('781'), np.str_('786'), np.str_('800'), np.str_('left_hand'), np.str_('right_hand')]
    Not setting metadata
    40 matching events found
    No baseline correction applied
    0 projection items activated
    /home/skojima/miniconda3/envs/sphinx/lib/python3.11/site-packages/tag_mne/mne_utils.py:14: RuntimeWarning: Concatenation of Annotations within Epochs is not supported yet. All annotations will be dropped.
      return mne.concatenate_epochs(epochs_list, add_offset)
    Using data from preloaded Raw for 40 events and 3329 original time points ...
    0 bad epochs dropped
    Using data from preloaded Raw for 40 events and 3329 original time points ...
    0 bad epochs dropped
    Using data from preloaded Raw for 40 events and 3329 original time points ...
    0 bad epochs dropped
    Using data from preloaded Raw for 40 events and 3329 original time points ...
    Using data from preloaded Raw for 40 events and 3329 original time points ...
    Using data from preloaded Raw for 40 events and 3329 original time points ...
    Not setting metadata
    120 matching events found
    No baseline correction applied
    Not setting metadata
    200 matching events found
    No baseline correction applied




.. GENERATED FROM PYTHON SOURCE LINES 111-134

.. code-block:: Python



    def func_proc_epochs(epochs, mode, tmin=0.5, tmax=4.5):
        epochs = epochs.pick(picks="eeg").crop(tmin=tmin, tmax=tmax)
        return epochs


    def func_load_epochs(keywords, mode, epochs):
        return epochs[keywords]


    def convert_epochs_to_ndarray(
        epochs,
        label_keys,
    ):

        X = epochs.get_data()
        X = pyriemann.estimation.Covariances().transform(X)
        y = rosoku.utils.get_labels_from_epochs(epochs, label_keys)

        return X, y









.. GENERATED FROM PYTHON SOURCE LINES 135-149

.. code-block:: Python

    label_keys = {"event:left": 0, "event:right": 1}

    results = rosoku.conventional(
        keywords_train=["run:1", "run:2"],
        keywords_test=[["run:3", "run:4", "run:5"]],
        func_load_epochs=functools.partial(func_load_epochs, epochs=epochs),
        func_proc_epochs=func_proc_epochs,
        func_convert_epochs_to_ndarray=functools.partial(
            convert_epochs_to_ndarray, label_keys=label_keys
        ),
    )

    for m in range(results.shape[0]):
        print(results.loc[m])




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    keywords_train                                       [run:1, run:2]
    keywords_test                                 [run:3, run:4, run:5]
    classifier                                                     tslr
    accuracy                                                   0.991667
    labels            [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, ...
    preds             [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, ...
    probas            [[0.21452739068104754, 0.7854726093189525], [0...
    desc                                                           None
    Name: 0, dtype: object
    keywords_train                                       [run:1, run:2]
    keywords_test                                 [run:3, run:4, run:5]
    classifier                                                      mdm
    accuracy                                                   0.991667
    labels            [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, ...
    preds             [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, ...
    probas            [[0.16316916967233025, 0.8368308303276697], [0...
    desc                                                           None
    Name: 1, dtype: object





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.187 seconds)


.. _sphx_glr_download_auto_examples_example_within-subject-classification-riemannian.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example_within-subject-classification-riemannian.ipynb <example_within-subject-classification-riemannian.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example_within-subject-classification-riemannian.py <example_within-subject-classification-riemannian.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: example_within-subject-classification-riemannian.zip <example_within-subject-classification-riemannian.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
